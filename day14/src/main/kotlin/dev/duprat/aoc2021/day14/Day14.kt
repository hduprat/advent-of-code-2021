/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day14

import dev.duprat.aoc2021.utils.*

class Day14Scenario : Scenario {
  var step = 0
  val basePolymer: String
  var occurrenceMap: Map<String, Long>
  val insertionRules: Map<String, List<String>>

  constructor() : super() {
    basePolymer = lines[0]
    insertionRules =
        lines.drop(2).associate {
          val keyValue = it.split(" -> ")
          keyValue[0] to listOf(keyValue[0][0] + keyValue[1], keyValue[1] + keyValue[0][1])
        }
    val pairs = basePolymer.windowed(2)
    occurrenceMap =
        lines.drop(2).associate {
          val keyValue = it.split(" -> ")
          keyValue[0] to pairs.count { it == keyValue[0] }.toLong()
        }
  }

  fun insert() {
    val nextOccurrenceMap = mutableMapOf<String, Long>()
    occurrenceMap.forEach { (pair, value) ->
      insertionRules.get(pair)?.forEach {
        val amount = nextOccurrenceMap.getOrDefault(it, 0)
        nextOccurrenceMap.put(it, amount + value)
      }
    }

    occurrenceMap = nextOccurrenceMap
  }

  fun insertUntilStep(n: Int) {
    while (step < n) {
      insert()
      step++
    }
  }

  fun createElementFrequencyMap(): Map<Char, Long> {
    val freqMap = mutableMapOf<Char, Long>()
    occurrenceMap.forEach { (key, value) ->
      key.forEach {
        val freq = freqMap.getOrDefault(it, 0)
        freqMap.put(it, freq + value)
      }
    }
    return freqMap.mapValues { (char, value) ->
      value / 2 + if (char == basePolymer.first() || char == basePolymer.last()) 1 else 0
    }
  }

  fun findMostPresentElementFrequency(): Long {
    val freqMap = createElementFrequencyMap()
    return freqMap.values.maxOrNull() ?: 0
  }

  fun findLeastPresentElementFrequency(): Long {
    val freqMap = createElementFrequencyMap()
    return freqMap.values.minOrNull() ?: 0
  }
}

fun main() {
  val scenario = Day14Scenario()
  println("Exercice 1")
  scenario.insertUntilStep(10)
  println(scenario.findMostPresentElementFrequency() - scenario.findLeastPresentElementFrequency())
  println("Exercice 2")
  scenario.insertUntilStep(40)
  println(scenario.findMostPresentElementFrequency() - scenario.findLeastPresentElementFrequency())
}
