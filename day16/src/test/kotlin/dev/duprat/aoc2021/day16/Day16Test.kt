/*
 * This Kotlin source file was generated by the Gradle "init" task.
 */
package dev.duprat.aoc2021.day16

import dev.duprat.aoc2021.utils.hex2bin
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertThrows

class Day16Test {
    @Test
    fun testInit() {
        val scenario = Day16Scenario()
        assertEquals(1, scenario.lines.size)
        assertEquals("A0016C880162017C3686B18A3D4780", scenario.lines[0])
    }

    @Test
    fun testDecodeToBinString() {
        val packet = LiteralValuePacket(hex2bin("D2FE28"))
        assertEquals("110100101111111000101000", packet.bin)
    }

    @Test
    fun testLiteralValuePacket() {
        val packet = LiteralValuePacket(hex2bin("D2FE28"))

        assertEquals(6, packet.version)
        assertEquals(4, packet.decodeTypeID())
        assertEquals(2021, packet.value)
        assertThrows<WrongPacketError>({ LiteralValuePacket(hex2bin("38006F45291200")) })
    }

    @Test
    fun testOperatorPacketLengthID0() {
        val packet = OperatorPacket(hex2bin("38006F45291200"))
        assertEquals(6, packet.decodeTypeID())
        assertEquals(0, packet.decodeLengthTypeID())
        assertEquals(2, packet.subPackets.size)
        assertThrows<WrongPacketError>({ OperatorPacket(hex2bin("D2FE28")) })
    }

    @Test
    fun testOperatorPacketLengthID1() {
        val packet = OperatorPacket(hex2bin("EE00D40C823060"))
        assertEquals(1, packet.decodeLengthTypeID())
        assertEquals(3, packet.subPackets.size)
    }

    @Test
    fun testPacketHierarchy() {
        assertEquals(16, OperatorPacket(hex2bin("8A004A801A8002F478")).computePacketHierarchy())
        assertEquals(
                12,
                OperatorPacket(hex2bin("620080001611562C8802118E34")).computePacketHierarchy()
        )
        assertEquals(
                23,
                OperatorPacket(hex2bin("C0015000016115A2E0802F182340")).computePacketHierarchy()
        )
        assertEquals(
                31,
                OperatorPacket(hex2bin("A0016C880162017C3686B18A3D4780")).computePacketHierarchy()
        )
    }

    @Test
    fun testSumPacketValue() {
        assertEquals(3, OperatorPacket(hex2bin("C200B40A82")).value)
    }

    @Test
    fun testProductPacketValue() {
        assertEquals(54, OperatorPacket(hex2bin("04005AC33890")).value)
    }

    @Test
    fun testMinPacketValue() {
        assertEquals(7, OperatorPacket(hex2bin("880086C3E88112")).value)
    }

    @Test
    fun testMaxPacketValue() {
        assertEquals(9, OperatorPacket(hex2bin("CE00C43D881120")).value)
    }

    @Test
    fun testLessThanPacketValue() {
        assertEquals(1, OperatorPacket(hex2bin("D8005AC2A8F0")).value)
    }

    @Test
    fun testGreaterThanPacketValue() {
        assertEquals(0, OperatorPacket(hex2bin("F600BC2D8F")).value)
    }

    @Test
    fun testEqualToPacketValue() {
        assertEquals(0, OperatorPacket(hex2bin("9C005AC2F8F0")).value)
    }

    @Test
    fun testMiscPacketValue() {
        assertEquals(1, OperatorPacket(hex2bin("9C0141080250320F1802104A08")).value)
    }
}
