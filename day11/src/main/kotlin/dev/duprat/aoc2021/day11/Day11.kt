/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day11

import dev.duprat.aoc2021.utils.*

class Day11Scenario : Scenario {
    val octopi: List<MutableList<Int>>
    var totalFlashes = 0
    var step = 0

    constructor() : super() {
        octopi = lines.map { line -> line.mapTo(mutableListOf()) { it.digitToInt() } }
    }

    fun shouldTriggerFlash(): Boolean {
        return octopi.any { row -> row.any { it > 9 } }
    }

    fun flash() {
        octopi.forEachIndexed { y, row ->
            row.forEachIndexed { x, _ ->
                if (octopi[y][x] > 9) {
                    if (y > 0 && x > 0) octopi[y - 1][x - 1]++
                    if (x > 0) octopi[y][x - 1]++
                    if (y < octopi.size - 1 && x > 0) octopi[y + 1][x - 1]++
                    if (y > 0) octopi[y - 1][x]++
                    if (y < octopi.size - 1) octopi[y + 1][x]++
                    if (y > 0 && x < octopi[y].size - 1) octopi[y - 1][x + 1]++
                    if (x < octopi[y].size - 1) octopi[y][x + 1]++
                    if (y < octopi.size - 1 && x < octopi[y].size - 1) octopi[y + 1][x + 1]++
                    octopi[y][x] = -1000
                    totalFlashes++
                }
            }
        }
    }

    fun executeStep() {
        octopi.forEach { it.forEachIndexed { index, _ -> it[index]++ } }
        while (shouldTriggerFlash()) flash()

        octopi.forEachIndexed { y, row ->
            row.forEachIndexed { x, _ ->
                if (octopi[y][x] < 0) {
                    octopi[y][x] = 0
                }
            }
        }
    }

    fun goToStep(n: Int) {
        for (i in step until n) {
            executeStep()
            step++
        }
    }

    fun doAllOctopiFlash(): Boolean {
        return octopi.all { row -> row.all { it == 0 } }
    }

    fun goToFirstCollectingFlashStep() {
        while (!doAllOctopiFlash()) {
            executeStep()
            step++
        }
    }
}

fun main() {
    val scenario = Day11Scenario()
    println("Exercice 1")
    scenario.goToStep(100)
    println(scenario.totalFlashes)
    println("Exercice 2")
    scenario.goToFirstCollectingFlashStep()
    println(scenario.step)
}
