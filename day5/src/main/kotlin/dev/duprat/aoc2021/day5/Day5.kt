/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day5

import dev.duprat.aoc2021.utils.Scenario
import kotlin.math.sign

class Day5Scenario : Scenario {
    val ventMap = mutableMapOf<String, Int>()
    val diagonalMode: Boolean

    fun addVentLine(first: String, last: String) {
        val firstCoords = first.split(",").map { it.toInt() }
        val lastCoords = last.split(",").map { it.toInt() }

        val dx = lastCoords[0] - firstCoords[0]
        val dy = lastCoords[1] - firstCoords[1]

        val stepX = dx.sign
        val stepY = dy.sign

        if (stepX != 0 && stepY != 0) {
            if (!diagonalMode) return
            val slope = Math.abs(dy / dx)
            if (slope != 1) return
        }

        val nSteps = Math.max(Math.abs(dx), Math.abs(dy))

        (0..nSteps).forEach {
            val x = firstCoords[0] + it * stepX
            val y = firstCoords[1] + it * stepY

            val currentValue = getNumberOfVentsAt(x, y)
            ventMap["$x,$y"] = currentValue + 1
        }
    }

    constructor(drawDiagonals: Boolean = false) : super() {
        diagonalMode = drawDiagonals
        lines.forEach {
            val points = it.split(" -> ")
            addVentLine(points[0], points[1])
        }
    }

    fun getNumberOfVentsAt(x: Int, y: Int): Int {
        return ventMap.getOrDefault("$x,$y", 0)
    }

    fun countBusyVents(): Int {
        return ventMap.count { it.value > 1 }
    }
}

fun main() {
    try {
        println("Exercice 1")
        val exercise1 = Day5Scenario()
        println(exercise1.countBusyVents())

        println("Exercice 2")
        val exercise2 = Day5Scenario(drawDiagonals = true)
        println(exercise2.countBusyVents())
    } catch (error: OutOfMemoryError) {
        println("uh oh")
    }
}
