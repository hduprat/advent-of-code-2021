/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day17

import dev.duprat.aoc2021.utils.Scenario

class Day17Scenario : Scenario {
  val xRange: IntRange
  val yRange: IntRange

  constructor() : super() {
    val targetRegex = Regex("^target area: x=(-?\\d+)\\.\\.(-?\\d+), y=(-?\\d+)\\.\\.(-?\\d+)")
    val result = targetRegex.find(lines[0])
    if (result == null) throw Error("Parsing failed.")
    val (xmin, xmax, ymin, ymax) = result.destructured
    xRange = xmin.toInt()..xmax.toInt()
    yRange = ymin.toInt()..ymax.toInt()
  }

  inline fun tryShots(onShotWorked: (shot: Shot) -> Unit) {
    val vxmin = Math.ceil(0.5 * (Math.sqrt(1 + 8 * xRange.first.toDouble()) - 1)).toInt()
    val vxmax = xRange.last
    val vymax = -1 - yRange.first
    val vymin = yRange.first

    for (vy in vymax downTo vymin) {
      for (vx in vxmin..vxmax) {
        val shot = Shot(vx, vy)
        if (shot.shootAtTarget(xRange, yRange)) {
          onShotWorked(shot)
        }
      }
    }
  }

  fun findHighestShotInTarget(): Int {
    tryShots {
      return it.maxY
    }

    return -1
  }

  fun findEveryShotInTarget(): List<Shot> {
    val workingShots = mutableListOf<Shot>()
    tryShots { workingShots.add(it) }

    return workingShots
  }
}

fun main() {
  val scenario = Day17Scenario()
  println("Exercice 1")
  println(scenario.findHighestShotInTarget())
  println("Exercice 2")
  println(scenario.findEveryShotInTarget().size)
}
