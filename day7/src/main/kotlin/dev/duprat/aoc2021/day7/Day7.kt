/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day7

import dev.duprat.aoc2021.utils.Scenario

class Day7Scenario : Scenario {
    val crabPositions: List<Int>
    val isCrabEngineering: Boolean

    constructor(isCrabEngineering: Boolean = false) : super() {
        crabPositions = lines[0].split(",").map { it.toInt() }
        this.isCrabEngineering = isCrabEngineering
    }

    fun getConsumptionToAlignAt(position: Int): Int {
        return crabPositions.fold(0) { consumptionBeforeCrab, crab ->
            val steps = Math.abs(crab - position)
            val consumption = if (isCrabEngineering) (steps * (steps + 1) / 2) else steps
            consumptionBeforeCrab + consumption
        }
    }

    fun getLowestConsumption(): Int {
        val minPos = crabPositions.minOrNull()
        val maxPos = crabPositions.maxOrNull()

        if (minPos == null || maxPos == null)
                throw Error("Error getting min and/or max crab positions")

        val consumptions = (minPos..maxPos).map { getConsumptionToAlignAt(it) }
        val lowestConsumption = consumptions.minOrNull()

        if (lowestConsumption == null) throw Error("Error getting lowest consumption")
        return lowestConsumption
    }
}

fun main() {
    println("Exercice 1")
    val scenario = Day7Scenario()
    println(scenario.getLowestConsumption())
    println("Exercice 2")
    val crabEngScenario = Day7Scenario(true)
    println(crabEngScenario.getLowestConsumption())
}
