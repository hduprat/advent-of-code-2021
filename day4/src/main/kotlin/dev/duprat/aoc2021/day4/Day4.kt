/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day4

import dev.duprat.aoc2021.utils.Scenario

class Day4Scenario : Scenario {
    lateinit var calledNumbers: MutableList<Int>
    lateinit var boards: MutableList<Board>

    constructor() : super() {
        if (lines.size < 7) return

        calledNumbers = lines[0].split(",").map { it.toInt() }.toMutableList()
        val boardChunks = lines.drop(1).chunked((6))
        boards = boardChunks.map { Board(it) }.toMutableList()
    }

    fun callNumber(number: Int) {
        boards.map { it.markNumber(number) }
    }

    fun isGameFinished(): Boolean {
        return boards.any { it.hasWon() }
    }

    fun calculateBoardScore(board: Board, lastCalledNumber: Int): Int {
        val unmarkedNumbers = board.getUnmarkedNumbers()
        return unmarkedNumbers.sum() * lastCalledNumber
    }

    fun getFinalScore(last: Boolean = false): Int {
        var number: Int
        do {
            number = calledNumbers.removeAt(0)
            callNumber(number)
        } while (!isGameFinished())

        if (last) {
            boards.removeIf { it.hasWon() }
            if (boards.size == 1) return getFinalScore() else return getFinalScore(last)
        }

        val winningBoard = boards.first { it.hasWon() }
        return calculateBoardScore(winningBoard, number)
    }

    class Board {
        var numberGrid: List<Int>
        var marked: MutableList<Boolean>

        constructor(lines: List<String>) {
            numberGrid =
                    lines.joinToString(" ").split(Regex("\\s+")).filter { it != "" }.map {
                        it.toInt()
                    }

            marked = Array(numberGrid.size) { false }.toMutableList()
        }

        fun markNumber(number: Int) {
            val index = numberGrid.indexOfFirst { it == number }
            if (index >= 0) marked[index] = true
        }

        fun hasWon(): Boolean {
            val lines = marked.chunked(5)
            if (lines.any { !it.contains(false) }) return true
            val columns = (0..4).map { marked.slice(it until marked.size step 5) }
            if (columns.any { !it.contains(false) }) return true
            return false
        }

        fun getUnmarkedNumbers(): List<Int> {
            return numberGrid.filterIndexed { index, _ -> !marked[index] }
        }
    }
}

fun main() {
    println("Exercice 1")
    val exercise1 = Day4Scenario()
    println(exercise1.getFinalScore())

    println("Exercice 2")
    val exercise2 = Day4Scenario()
    println(exercise2.getFinalScore(last = true))
}
