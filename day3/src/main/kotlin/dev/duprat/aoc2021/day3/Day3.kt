/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day3

import dev.duprat.aoc2021.utils.Scenario

class Day3Scenario : Scenario {
    var gammaRate = 0
    var epsilonRate = 0
    var oxygenGeneratorRating = 0
    var co2ScrubberRating = 0

    constructor() : super() {}

    private fun getMostCommonBitAtPlace(lines: List<String> = this.lines, place: Int): Char {
        val nthChars = lines.map { it[place] }
        val nZeroes = nthChars.count { it == '0' }
        val nOnes = nthChars.count { it == '1' }

        if (nZeroes > nOnes) return '0' else return '1'
    }

    private fun getLeastCommonBitAtPlace(lines: List<String> = this.lines, place: Int): Char {
        val nthChars = lines.map { it[place] }
        val nZeroes = nthChars.count { it == '0' }
        val nOnes = nthChars.count { it == '1' }

        if (nZeroes <= nOnes) return '0' else return '1'
    }

    fun computeGammaRate() {
        val binaryGammaRate =
                lines[0].mapIndexed { index, _ -> getMostCommonBitAtPlace(place = index) }
        gammaRate = binaryGammaRate.joinToString("").toInt(2)
    }

    fun computeEpsilonRate() {
        val binaryGammaRate =
                lines[0].mapIndexed { index, _ -> getLeastCommonBitAtPlace(place = index) }
        epsilonRate = binaryGammaRate.joinToString("").toInt(2)
    }

    fun computeOxygenGeneratorRating() {
        var remainingLines = lines.toMutableList()
        var place = 0
        while (remainingLines.size > 1 && place < lines[0].length) {
            val mostBit = getMostCommonBitAtPlace(remainingLines, place)
            remainingLines.removeIf { it[place] != mostBit }
            place++
        }

        oxygenGeneratorRating = remainingLines[0].toInt(2)
    }

    fun computeCo2ScrubberRating() {
        var remainingLines = lines.toMutableList()
        var place = 0
        while (remainingLines.size > 1 && place < lines[0].length) {
            val mostBit = getLeastCommonBitAtPlace(remainingLines, place)
            remainingLines.removeIf { it[place] != mostBit }
            place++
        }

        co2ScrubberRating = remainingLines[0].toInt(2)
    }

    fun getPowerConsumption(): Int {
        computeGammaRate()
        computeEpsilonRate()
        return gammaRate * epsilonRate
    }

    fun getLifeSupportRating(): Int {
        computeOxygenGeneratorRating()
        computeCo2ScrubberRating()
        return oxygenGeneratorRating * co2ScrubberRating
    }
}

fun main() {
    println("Exercice 1")
    val exercise1 = Day3Scenario()
    println(exercise1.getPowerConsumption())

    println("Exercice 2")
    val exercise2 = Day3Scenario()
    println(exercise2.getLifeSupportRating())
}
