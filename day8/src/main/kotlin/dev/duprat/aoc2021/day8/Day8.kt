/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day8

import dev.duprat.aoc2021.utils.*
import java.util.SortedSet

class Day8Scenario : Scenario {
    val signalPatterns: List<List<String>>
    val outputSignals: List<List<String>>

    val numberOfSegments = arrayOf(6, 2, 5, 5, 4, 5, 6, 3, 7, 6)

    constructor() : super() {
        val signalsPairs =
                lines
                        .map {
                            val signals = it.split(" | ")
                            signals[0] to signals[1]
                        }
                        .unzip()

        signalPatterns = signalsPairs.first.map { it.split(" ") }
        outputSignals = signalsPairs.second.map { it.split(" ") }
    }

    fun countEasyDigits(): Int {
        // Count occurrences of 1,4,7,8 in output signals
        return outputSignals.sumOf {
            it.count { it.length in numberOfSegments.slice(setOf(1, 4, 7, 8)) }
        }
    }

    fun decodeOutput(signalPattern: List<String>, outputSignal: List<String>): Int {
        fun extractSubPattern(predicate: (String) -> Boolean): SortedSet<Char> {
            return signalPattern.first(predicate).toSortedSet()
        }

        val segments = mutableListOf(' ', ' ', ' ', ' ', ' ', ' ', ' ')

        val one = extractSubPattern { it.length == 2 }
        val four = extractSubPattern { it.length == 4 }
        val seven = extractSubPattern { it.length == 3 }
        val eight = extractSubPattern { it.length == 7 }

        segments[0] = seven.subtract(one).first()

        val nine = extractSubPattern {
            val almostNine = unionSet(four, segments[0])
            it.toSortedSet().containsAll(almostNine) && it.length == almostNine.size + 1
        }

        segments[4] = eight.subtract(nine).first()
        segments[6] = nine.subtract(four.union(seven)).first()

        val three = extractSubPattern {
            val almostThree = unionSet(seven, segments[6])
            it.toSortedSet().containsAll(almostThree) && it.length == almostThree.size + 1
        }

        segments[3] = three.subtract(unionSet(seven, segments[6])).first()

        val zero = extractSubPattern {
            val almostZero = unionSet(seven, segments[6], segments[4])
            it.toSortedSet().containsAll(almostZero) && it.length == almostZero.size + 1
        }

        segments[1] = zero.subtract(unionSet(seven, segments[6], segments[4])).first()

        val two = extractSubPattern {
            val almostTwo = segments.slice(setOf(0, 3, 4, 6)).toSortedSet()
            it.toSortedSet().containsAll(almostTwo) && it.length == almostTwo.size + 1
        }

        segments[2] = two.subtract(segments.slice(setOf(0, 3, 4, 6)).toSortedSet()).first()

        segments[5] = eight.subtract(segments.toSortedSet()).first()

        val five = segments.slice(setOf(0, 1, 3, 5, 6)).toSortedSet()
        val six = segments.slice(setOf(0, 1, 3, 4, 5, 6)).toSortedSet()

        val numbers = listOf(zero, one, two, three, four, five, six, seven, eight, nine)

        val outputValue =
                outputSignal
                        .map { digit -> numbers.indexOfFirst { digit.toSortedSet().equals(it) } }
                        .joinToString("")
                        .toInt()

        return outputValue
    }

    fun sumAllOutputs(): Int {
        return (0 until lines.size).sumOf { decodeOutput(signalPatterns[it], outputSignals[it]) }
    }
}

fun main() {
    println("Exercice 1")
    val scenario = Day8Scenario()
    println(scenario.countEasyDigits())
    println("Exercice 2")
    println(scenario.sumAllOutputs())
}
