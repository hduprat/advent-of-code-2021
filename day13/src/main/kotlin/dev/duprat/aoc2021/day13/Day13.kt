/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package dev.duprat.aoc2021.day13

import dev.duprat.aoc2021.utils.*

class Day13Scenario : Scenario {
  var points: List<Point>
  val foldingAxes: List<Point>
  var foldedTimes = 0

  constructor() : super() {
    points =
        lines.takeWhile { it != "" }.map {
          Pair(it.split(",")[0].toInt(), it.split(",")[1].toInt())
        }

    foldingAxes =
        lines.takeLastWhile { it != "" }.mapNotNull {
          val axis = it.substringAfterLast(" ").split("=")
          when (axis[0]) {
            "x" -> Pair(axis[1].toInt(), 0)
            "y" -> Pair(0, axis[1].toInt())
            else -> null
          }
        }
  }

  fun foldOnce(foldingAxis: Point) {
    val newPoints =
        points.mapTo(mutableSetOf()) { point ->
          when {
            foldingAxis.first == 0 && point.second <= foldingAxis.second -> point
            foldingAxis.second == 0 && point.first <= foldingAxis.first -> point
            foldingAxis.first == 0 && point.second > foldingAxis.second ->
                Pair(point.first, 2 * foldingAxis.second - point.second)
            foldingAxis.second == 0 && point.first > foldingAxis.first ->
                Pair(2 * foldingAxis.first - point.first, point.second)
            else -> point
          }
        }
    points = newPoints.toList()
    foldedTimes++
  }

  fun foldTimes(n: Int) {
    for (i in foldedTimes until foldedTimes + n) {
      foldOnce(foldingAxes[i])
    }
  }

  fun foldAll() {
    foldTimes(foldingAxes.size - foldedTimes)
  }

  fun drawFoldedSheet(): List<String> {
    val width = points.maxOf { it.first }
    val height = points.maxOf { it.second }

    val foldedSheet = mutableListOf<String>()

    for (y in 0..height) {
      val line = (0..width).map { x -> if (points.contains(x to y)) '#' else '.' }.joinToString("")
      println(line)
      foldedSheet.add(line)
    }
    return foldedSheet
  }
}

fun main() {
  val scenario = Day13Scenario()
  println("Exercice 1")
  scenario.foldTimes(1)
  println(scenario.points.size)
  println("Exercice 2")
  scenario.foldAll()
  scenario.drawFoldedSheet()
}
